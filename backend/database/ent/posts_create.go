// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sharing-vision/database/ent/posts"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostsCreate is the builder for creating a Posts entity.
type PostsCreate struct {
	config
	mutation *PostsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PostsCreate) SetCreatedAt(t time.Time) *PostsCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PostsCreate) SetNillableCreatedAt(t *time.Time) *PostsCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PostsCreate) SetUpdatedAt(t time.Time) *PostsCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PostsCreate) SetNillableUpdatedAt(t *time.Time) *PostsCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetTitle sets the "title" field.
func (pc *PostsCreate) SetTitle(s string) *PostsCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetContent sets the "content" field.
func (pc *PostsCreate) SetContent(s string) *PostsCreate {
	pc.mutation.SetContent(s)
	return pc
}

// SetCategory sets the "category" field.
func (pc *PostsCreate) SetCategory(s string) *PostsCreate {
	pc.mutation.SetCategory(s)
	return pc
}

// SetStatus sets the "status" field.
func (pc *PostsCreate) SetStatus(po posts.Status) *PostsCreate {
	pc.mutation.SetStatus(po)
	return pc
}

// SetID sets the "id" field.
func (pc *PostsCreate) SetID(i int) *PostsCreate {
	pc.mutation.SetID(i)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PostsCreate) SetNillableID(i *int) *PostsCreate {
	if i != nil {
		pc.SetID(*i)
	}
	return pc
}

// Mutation returns the PostsMutation object of the builder.
func (pc *PostsCreate) Mutation() *PostsMutation {
	return pc.mutation
}

// Save creates the Posts in the database.
func (pc *PostsCreate) Save(ctx context.Context) (*Posts, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PostsCreate) SaveX(ctx context.Context) *Posts {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PostsCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PostsCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PostsCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := posts.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := posts.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := posts.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PostsCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Posts.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Posts.updated_at"`)}
	}
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Posts.title"`)}
	}
	if v, ok := pc.mutation.Title(); ok {
		if err := posts.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Posts.title": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Posts.content"`)}
	}
	if _, ok := pc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Posts.category"`)}
	}
	if v, ok := pc.mutation.Category(); ok {
		if err := posts.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Posts.category": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Posts.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := posts.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Posts.status": %w`, err)}
		}
	}
	return nil
}

func (pc *PostsCreate) sqlSave(ctx context.Context) (*Posts, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PostsCreate) createSpec() (*Posts, *sqlgraph.CreateSpec) {
	var (
		_node = &Posts{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(posts.Table, sqlgraph.NewFieldSpec(posts.FieldID, field.TypeInt))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(posts.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(posts.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(posts.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.Content(); ok {
		_spec.SetField(posts.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := pc.mutation.Category(); ok {
		_spec.SetField(posts.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(posts.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	return _node, _spec
}

// PostsCreateBulk is the builder for creating many Posts entities in bulk.
type PostsCreateBulk struct {
	config
	err      error
	builders []*PostsCreate
}

// Save creates the Posts entities in the database.
func (pcb *PostsCreateBulk) Save(ctx context.Context) ([]*Posts, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Posts, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PostsCreateBulk) SaveX(ctx context.Context) []*Posts {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PostsCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PostsCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
