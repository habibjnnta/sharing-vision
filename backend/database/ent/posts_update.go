// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sharing-vision/database/ent/posts"
	"sharing-vision/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostsUpdate is the builder for updating Posts entities.
type PostsUpdate struct {
	config
	hooks    []Hook
	mutation *PostsMutation
}

// Where appends a list predicates to the PostsUpdate builder.
func (pu *PostsUpdate) Where(ps ...predicate.Posts) *PostsUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PostsUpdate) SetUpdatedAt(t time.Time) *PostsUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PostsUpdate) SetTitle(s string) *PostsUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PostsUpdate) SetNillableTitle(s *string) *PostsUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetContent sets the "content" field.
func (pu *PostsUpdate) SetContent(s string) *PostsUpdate {
	pu.mutation.SetContent(s)
	return pu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pu *PostsUpdate) SetNillableContent(s *string) *PostsUpdate {
	if s != nil {
		pu.SetContent(*s)
	}
	return pu
}

// SetCategory sets the "category" field.
func (pu *PostsUpdate) SetCategory(s string) *PostsUpdate {
	pu.mutation.SetCategory(s)
	return pu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pu *PostsUpdate) SetNillableCategory(s *string) *PostsUpdate {
	if s != nil {
		pu.SetCategory(*s)
	}
	return pu
}

// SetStatus sets the "status" field.
func (pu *PostsUpdate) SetStatus(po posts.Status) *PostsUpdate {
	pu.mutation.SetStatus(po)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PostsUpdate) SetNillableStatus(po *posts.Status) *PostsUpdate {
	if po != nil {
		pu.SetStatus(*po)
	}
	return pu
}

// Mutation returns the PostsMutation object of the builder.
func (pu *PostsUpdate) Mutation() *PostsMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostsUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostsUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostsUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostsUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PostsUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := posts.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PostsUpdate) check() error {
	if v, ok := pu.mutation.Title(); ok {
		if err := posts.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Posts.title": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Category(); ok {
		if err := posts.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Posts.category": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := posts.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Posts.status": %w`, err)}
		}
	}
	return nil
}

func (pu *PostsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(posts.Table, posts.Columns, sqlgraph.NewFieldSpec(posts.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(posts.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(posts.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.SetField(posts.FieldContent, field.TypeString, value)
	}
	if value, ok := pu.mutation.Category(); ok {
		_spec.SetField(posts.FieldCategory, field.TypeString, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(posts.FieldStatus, field.TypeEnum, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{posts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostsUpdateOne is the builder for updating a single Posts entity.
type PostsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PostsUpdateOne) SetUpdatedAt(t time.Time) *PostsUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetTitle sets the "title" field.
func (puo *PostsUpdateOne) SetTitle(s string) *PostsUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PostsUpdateOne) SetNillableTitle(s *string) *PostsUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetContent sets the "content" field.
func (puo *PostsUpdateOne) SetContent(s string) *PostsUpdateOne {
	puo.mutation.SetContent(s)
	return puo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (puo *PostsUpdateOne) SetNillableContent(s *string) *PostsUpdateOne {
	if s != nil {
		puo.SetContent(*s)
	}
	return puo
}

// SetCategory sets the "category" field.
func (puo *PostsUpdateOne) SetCategory(s string) *PostsUpdateOne {
	puo.mutation.SetCategory(s)
	return puo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (puo *PostsUpdateOne) SetNillableCategory(s *string) *PostsUpdateOne {
	if s != nil {
		puo.SetCategory(*s)
	}
	return puo
}

// SetStatus sets the "status" field.
func (puo *PostsUpdateOne) SetStatus(po posts.Status) *PostsUpdateOne {
	puo.mutation.SetStatus(po)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PostsUpdateOne) SetNillableStatus(po *posts.Status) *PostsUpdateOne {
	if po != nil {
		puo.SetStatus(*po)
	}
	return puo
}

// Mutation returns the PostsMutation object of the builder.
func (puo *PostsUpdateOne) Mutation() *PostsMutation {
	return puo.mutation
}

// Where appends a list predicates to the PostsUpdate builder.
func (puo *PostsUpdateOne) Where(ps ...predicate.Posts) *PostsUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostsUpdateOne) Select(field string, fields ...string) *PostsUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Posts entity.
func (puo *PostsUpdateOne) Save(ctx context.Context) (*Posts, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostsUpdateOne) SaveX(ctx context.Context) *Posts {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostsUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostsUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PostsUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := posts.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PostsUpdateOne) check() error {
	if v, ok := puo.mutation.Title(); ok {
		if err := posts.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Posts.title": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Category(); ok {
		if err := posts.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Posts.category": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := posts.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Posts.status": %w`, err)}
		}
	}
	return nil
}

func (puo *PostsUpdateOne) sqlSave(ctx context.Context) (_node *Posts, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(posts.Table, posts.Columns, sqlgraph.NewFieldSpec(posts.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Posts.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, posts.FieldID)
		for _, f := range fields {
			if !posts.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != posts.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(posts.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(posts.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.SetField(posts.FieldContent, field.TypeString, value)
	}
	if value, ok := puo.mutation.Category(); ok {
		_spec.SetField(posts.FieldCategory, field.TypeString, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(posts.FieldStatus, field.TypeEnum, value)
	}
	_node = &Posts{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{posts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
